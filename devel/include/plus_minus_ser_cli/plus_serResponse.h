// Generated by gencpp from file plus_minus_ser_cli/plus_serResponse.msg
// DO NOT EDIT!


#ifndef PLUS_MINUS_SER_CLI_MESSAGE_PLUS_SERRESPONSE_H
#define PLUS_MINUS_SER_CLI_MESSAGE_PLUS_SERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plus_minus_ser_cli
{
template <class ContainerAllocator>
struct plus_serResponse_
{
  typedef plus_serResponse_<ContainerAllocator> Type;

  plus_serResponse_()
    : result(0)
    , eq()  {
    }
  plus_serResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , eq(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _eq_type;
  _eq_type eq;




  typedef boost::shared_ptr< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> const> ConstPtr;

}; // struct plus_serResponse_

typedef ::plus_minus_ser_cli::plus_serResponse_<std::allocator<void> > plus_serResponse;

typedef boost::shared_ptr< ::plus_minus_ser_cli::plus_serResponse > plus_serResponsePtr;
typedef boost::shared_ptr< ::plus_minus_ser_cli::plus_serResponse const> plus_serResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace plus_minus_ser_cli

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1de2031bd85ae7c5679a89a32f6c623";
  }

  static const char* value(const ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1de2031bd85ae7cULL;
  static const uint64_t static_value2 = 0x5679a89a32f6c623ULL;
};

template<class ContainerAllocator>
struct DataType< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plus_minus_ser_cli/plus_serResponse";
  }

  static const char* value(const ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 result\n\
string eq\n\
\n\
";
  }

  static const char* value(const ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.eq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plus_serResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plus_minus_ser_cli::plus_serResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int16_t>::stream(s, indent + "  ", v.result);
    s << indent << "eq: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.eq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLUS_MINUS_SER_CLI_MESSAGE_PLUS_SERRESPONSE_H
